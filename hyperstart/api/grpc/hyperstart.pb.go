// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hyperstart.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	hyperstart.proto

It has these top-level messages:
	AddContainerRequest
	AddProcessRequest
	SignalProcessRequest
	WaitProcessRequest
	WaitProcessResponse
	WriteStreamRequest
	WriteStreamResponse
	ReadStreamRequest
	ReadStreamResponse
	CloseStdinRequest
	TtyWinResizeRequest
	StartSandboxRequest
	DestroySandboxRequest
	UpdateInterfaceRequest
	AddRouteRequest
	OnlineCPUMemRequest
	Container
	Mount
	Process
	User
	Rlimit
	Route
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddContainerRequest struct {
	Container *Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Init      *Process   `protobuf:"bytes,2,opt,name=init" json:"init,omitempty"`
}

func (m *AddContainerRequest) Reset()                    { *m = AddContainerRequest{} }
func (m *AddContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*AddContainerRequest) ProtoMessage()               {}
func (*AddContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddContainerRequest) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *AddContainerRequest) GetInit() *Process {
	if m != nil {
		return m.Init
	}
	return nil
}

type AddProcessRequest struct {
	Container string   `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   *Process `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
}

func (m *AddProcessRequest) Reset()                    { *m = AddProcessRequest{} }
func (m *AddProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*AddProcessRequest) ProtoMessage()               {}
func (*AddProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddProcessRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *AddProcessRequest) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type SignalProcessRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Signal    uint32 `protobuf:"varint,3,opt,name=signal" json:"signal,omitempty"`
}

func (m *SignalProcessRequest) Reset()                    { *m = SignalProcessRequest{} }
func (m *SignalProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*SignalProcessRequest) ProtoMessage()               {}
func (*SignalProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignalProcessRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *SignalProcessRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *SignalProcessRequest) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type WaitProcessRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
}

func (m *WaitProcessRequest) Reset()                    { *m = WaitProcessRequest{} }
func (m *WaitProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessRequest) ProtoMessage()               {}
func (*WaitProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WaitProcessRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *WaitProcessRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

type WaitProcessResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *WaitProcessResponse) Reset()                    { *m = WaitProcessResponse{} }
func (m *WaitProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitProcessResponse) ProtoMessage()               {}
func (*WaitProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WaitProcessResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type WriteStreamRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteStreamRequest) Reset()                    { *m = WriteStreamRequest{} }
func (m *WriteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamRequest) ProtoMessage()               {}
func (*WriteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WriteStreamRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *WriteStreamRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *WriteStreamRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type WriteStreamResponse struct {
	Len uint32 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
}

func (m *WriteStreamResponse) Reset()                    { *m = WriteStreamResponse{} }
func (m *WriteStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteStreamResponse) ProtoMessage()               {}
func (*WriteStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WriteStreamResponse) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Len       uint32 `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
}

func (m *ReadStreamRequest) Reset()                    { *m = ReadStreamRequest{} }
func (m *ReadStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamRequest) ProtoMessage()               {}
func (*ReadStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadStreamRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ReadStreamRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *ReadStreamRequest) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadStreamResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadStreamResponse) Reset()                    { *m = ReadStreamResponse{} }
func (m *ReadStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadStreamResponse) ProtoMessage()               {}
func (*ReadStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadStreamResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CloseStdinRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
}

func (m *CloseStdinRequest) Reset()                    { *m = CloseStdinRequest{} }
func (m *CloseStdinRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseStdinRequest) ProtoMessage()               {}
func (*CloseStdinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CloseStdinRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *CloseStdinRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

type TtyWinResizeRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Process   string `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
	Row       uint32 `protobuf:"varint,3,opt,name=row" json:"row,omitempty"`
	Column    uint32 `protobuf:"varint,4,opt,name=column" json:"column,omitempty"`
}

func (m *TtyWinResizeRequest) Reset()                    { *m = TtyWinResizeRequest{} }
func (m *TtyWinResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*TtyWinResizeRequest) ProtoMessage()               {}
func (*TtyWinResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TtyWinResizeRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *TtyWinResizeRequest) GetProcess() string {
	if m != nil {
		return m.Process
	}
	return ""
}

func (m *TtyWinResizeRequest) GetRow() uint32 {
	if m != nil {
		return m.Row
	}
	return 0
}

func (m *TtyWinResizeRequest) GetColumn() uint32 {
	if m != nil {
		return m.Column
	}
	return 0
}

type StartSandboxRequest struct {
	Hostname string   `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Dns      []string `protobuf:"bytes,2,rep,name=dns" json:"dns,omitempty"`
}

func (m *StartSandboxRequest) Reset()                    { *m = StartSandboxRequest{} }
func (m *StartSandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*StartSandboxRequest) ProtoMessage()               {}
func (*StartSandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StartSandboxRequest) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *StartSandboxRequest) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

type DestroySandboxRequest struct {
}

func (m *DestroySandboxRequest) Reset()                    { *m = DestroySandboxRequest{} }
func (m *DestroySandboxRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroySandboxRequest) ProtoMessage()               {}
func (*DestroySandboxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type UpdateInterfaceRequest struct {
	Device  string   `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
}

func (m *UpdateInterfaceRequest) Reset()                    { *m = UpdateInterfaceRequest{} }
func (m *UpdateInterfaceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateInterfaceRequest) ProtoMessage()               {}
func (*UpdateInterfaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpdateInterfaceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *UpdateInterfaceRequest) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddRouteRequest struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *AddRouteRequest) Reset()                    { *m = AddRouteRequest{} }
func (m *AddRouteRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRouteRequest) ProtoMessage()               {}
func (*AddRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddRouteRequest) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type OnlineCPUMemRequest struct {
}

func (m *OnlineCPUMemRequest) Reset()                    { *m = OnlineCPUMemRequest{} }
func (m *OnlineCPUMemRequest) String() string            { return proto.CompactTextString(m) }
func (*OnlineCPUMemRequest) ProtoMessage()               {}
func (*OnlineCPUMemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type Container struct {
	Id     string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Mounts []*Mount          `protobuf:"bytes,2,rep,name=mounts" json:"mounts,omitempty"`
	Sysctl map[string]string `protobuf:"bytes,3,rep,name=sysctl" json:"sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetMounts() []*Mount {
	if m != nil {
		return m.Mounts
	}
	return nil
}

func (m *Container) GetSysctl() map[string]string {
	if m != nil {
		return m.Sysctl
	}
	return nil
}

// @dest   the path inside the container expect when it starts with "tmp:/"
// @source the path inside the container expect when it starts with "vm:/dev/" or "tmp:/"
//         the path which starts with "vm:/dev/" refers the guest vm's "/dev",
//         especially, "vm:/dev/hostfs/" refers to the shared filesystem.
//         "tmp:/" is a temporary directory which is used for temporary mounts.
// message Mount (APIs about rootfs/mounts/volumes) would be changed very devastatingly
type Mount struct {
	Dest    string   `protobuf:"bytes,1,opt,name=dest" json:"dest,omitempty"`
	Source  string   `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Options []string `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
}

func (m *Mount) Reset()                    { *m = Mount{} }
func (m *Mount) String() string            { return proto.CompactTextString(m) }
func (*Mount) ProtoMessage()               {}
func (*Mount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Mount) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *Mount) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Mount) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Mount) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

type Process struct {
	Id       string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Args     []string          `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	Envs     map[string]string `protobuf:"bytes,3,rep,name=envs" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	User     *User             `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Workdir  string            `protobuf:"bytes,5,opt,name=workdir" json:"workdir,omitempty"`
	Terminal bool              `protobuf:"varint,6,opt,name=terminal" json:"terminal,omitempty"`
	Rlimits  []*Rlimit         `protobuf:"bytes,7,rep,name=rlimits" json:"rlimits,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Process) GetEnvs() map[string]string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *Process) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Process) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *Process) GetTerminal() bool {
	if m != nil {
		return m.Terminal
	}
	return false
}

func (m *Process) GetRlimits() []*Rlimit {
	if m != nil {
		return m.Rlimits
	}
	return nil
}

type User struct {
	Uid            string   `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Gid            string   `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	AdditionalGids []uint32 `protobuf:"varint,3,rep,packed,name=additionalGids" json:"additionalGids,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *User) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *User) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *User) GetAdditionalGids() []uint32 {
	if m != nil {
		return m.AdditionalGids
	}
	return nil
}

type Rlimit struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Hard uint64 `protobuf:"varint,2,opt,name=hard" json:"hard,omitempty"`
	Soft uint64 `protobuf:"varint,3,opt,name=soft" json:"soft,omitempty"`
}

func (m *Rlimit) Reset()                    { *m = Rlimit{} }
func (m *Rlimit) String() string            { return proto.CompactTextString(m) }
func (*Rlimit) ProtoMessage()               {}
func (*Rlimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Rlimit) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Rlimit) GetHard() uint64 {
	if m != nil {
		return m.Hard
	}
	return 0
}

func (m *Rlimit) GetSoft() uint64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

type Route struct {
	Dest    string `protobuf:"bytes,1,opt,name=dest" json:"dest,omitempty"`
	Gateway string `protobuf:"bytes,2,opt,name=gateway" json:"gateway,omitempty"`
	Device  string `protobuf:"bytes,3,opt,name=device" json:"device,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Route) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *Route) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Route) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func init() {
	proto.RegisterType((*AddContainerRequest)(nil), "grpc.AddContainerRequest")
	proto.RegisterType((*AddProcessRequest)(nil), "grpc.AddProcessRequest")
	proto.RegisterType((*SignalProcessRequest)(nil), "grpc.SignalProcessRequest")
	proto.RegisterType((*WaitProcessRequest)(nil), "grpc.WaitProcessRequest")
	proto.RegisterType((*WaitProcessResponse)(nil), "grpc.WaitProcessResponse")
	proto.RegisterType((*WriteStreamRequest)(nil), "grpc.WriteStreamRequest")
	proto.RegisterType((*WriteStreamResponse)(nil), "grpc.WriteStreamResponse")
	proto.RegisterType((*ReadStreamRequest)(nil), "grpc.ReadStreamRequest")
	proto.RegisterType((*ReadStreamResponse)(nil), "grpc.ReadStreamResponse")
	proto.RegisterType((*CloseStdinRequest)(nil), "grpc.CloseStdinRequest")
	proto.RegisterType((*TtyWinResizeRequest)(nil), "grpc.TtyWinResizeRequest")
	proto.RegisterType((*StartSandboxRequest)(nil), "grpc.StartSandboxRequest")
	proto.RegisterType((*DestroySandboxRequest)(nil), "grpc.DestroySandboxRequest")
	proto.RegisterType((*UpdateInterfaceRequest)(nil), "grpc.UpdateInterfaceRequest")
	proto.RegisterType((*AddRouteRequest)(nil), "grpc.AddRouteRequest")
	proto.RegisterType((*OnlineCPUMemRequest)(nil), "grpc.OnlineCPUMemRequest")
	proto.RegisterType((*Container)(nil), "grpc.Container")
	proto.RegisterType((*Mount)(nil), "grpc.Mount")
	proto.RegisterType((*Process)(nil), "grpc.Process")
	proto.RegisterType((*User)(nil), "grpc.User")
	proto.RegisterType((*Rlimit)(nil), "grpc.Rlimit")
	proto.RegisterType((*Route)(nil), "grpc.Route")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for HyperstartService service

type HyperstartServiceClient interface {
	// execution
	AddContainer(ctx context.Context, in *AddContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc1.CallOption) (*WaitProcessResponse, error)
	// stdio
	WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error)
	ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error)
	CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	StartSandbox(ctx context.Context, in *StartSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
}

type hyperstartServiceClient struct {
	cc *grpc1.ClientConn
}

func NewHyperstartServiceClient(cc *grpc1.ClientConn) HyperstartServiceClient {
	return &hyperstartServiceClient{cc}
}

func (c *hyperstartServiceClient) AddContainer(ctx context.Context, in *AddContainerRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/AddContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) AddProcess(ctx context.Context, in *AddProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/AddProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) SignalProcess(ctx context.Context, in *SignalProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/SignalProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) WaitProcess(ctx context.Context, in *WaitProcessRequest, opts ...grpc1.CallOption) (*WaitProcessResponse, error) {
	out := new(WaitProcessResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/WaitProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) WriteStdin(ctx context.Context, in *WriteStreamRequest, opts ...grpc1.CallOption) (*WriteStreamResponse, error) {
	out := new(WriteStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/WriteStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStdout(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStdout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) ReadStderr(ctx context.Context, in *ReadStreamRequest, opts ...grpc1.CallOption) (*ReadStreamResponse, error) {
	out := new(ReadStreamResponse)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/ReadStderr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) CloseStdin(ctx context.Context, in *CloseStdinRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/CloseStdin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) TtyWinResize(ctx context.Context, in *TtyWinResizeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/TtyWinResize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) StartSandbox(ctx context.Context, in *StartSandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/StartSandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) DestroySandbox(ctx context.Context, in *DestroySandboxRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/DestroySandbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) UpdateInterface(ctx context.Context, in *UpdateInterfaceRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/UpdateInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) AddRoute(ctx context.Context, in *AddRouteRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/AddRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperstartServiceClient) OnlineCPUMem(ctx context.Context, in *OnlineCPUMemRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.HyperstartService/OnlineCPUMem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HyperstartService service

type HyperstartServiceServer interface {
	// execution
	AddContainer(context.Context, *AddContainerRequest) (*google_protobuf.Empty, error)
	AddProcess(context.Context, *AddProcessRequest) (*google_protobuf.Empty, error)
	SignalProcess(context.Context, *SignalProcessRequest) (*google_protobuf.Empty, error)
	WaitProcess(context.Context, *WaitProcessRequest) (*WaitProcessResponse, error)
	// stdio
	WriteStdin(context.Context, *WriteStreamRequest) (*WriteStreamResponse, error)
	ReadStdout(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	ReadStderr(context.Context, *ReadStreamRequest) (*ReadStreamResponse, error)
	CloseStdin(context.Context, *CloseStdinRequest) (*google_protobuf.Empty, error)
	TtyWinResize(context.Context, *TtyWinResizeRequest) (*google_protobuf.Empty, error)
	// misc (TODO: some rpcs can be replaced by hyperstart-exec)
	StartSandbox(context.Context, *StartSandboxRequest) (*google_protobuf.Empty, error)
	DestroySandbox(context.Context, *DestroySandboxRequest) (*google_protobuf.Empty, error)
	UpdateInterface(context.Context, *UpdateInterfaceRequest) (*google_protobuf.Empty, error)
	AddRoute(context.Context, *AddRouteRequest) (*google_protobuf.Empty, error)
	OnlineCPUMem(context.Context, *OnlineCPUMemRequest) (*google_protobuf.Empty, error)
}

func RegisterHyperstartServiceServer(s *grpc1.Server, srv HyperstartServiceServer) {
	s.RegisterService(&_HyperstartService_serviceDesc, srv)
}

func _HyperstartService_AddContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).AddContainer(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/AddContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).AddContainer(ctx, req.(*AddContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_AddProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).AddProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/AddProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).AddProcess(ctx, req.(*AddProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_SignalProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/SignalProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).SignalProcess(ctx, req.(*SignalProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_WaitProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).WaitProcess(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/WaitProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).WaitProcess(ctx, req.(*WaitProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_WriteStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/WriteStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).WriteStdin(ctx, req.(*WriteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStdout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStdout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStdout(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_ReadStderr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/ReadStderr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).ReadStderr(ctx, req.(*ReadStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_CloseStdin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseStdinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/CloseStdin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).CloseStdin(ctx, req.(*CloseStdinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_TtyWinResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(TtyWinResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/TtyWinResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).TtyWinResize(ctx, req.(*TtyWinResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_StartSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).StartSandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/StartSandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).StartSandbox(ctx, req.(*StartSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_DestroySandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroySandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/DestroySandbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).DestroySandbox(ctx, req.(*DestroySandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_UpdateInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/UpdateInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).UpdateInterface(ctx, req.(*UpdateInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).AddRoute(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).AddRoute(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperstartService_OnlineCPUMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineCPUMemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HyperstartService/OnlineCPUMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperstartServiceServer).OnlineCPUMem(ctx, req.(*OnlineCPUMemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HyperstartService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.HyperstartService",
	HandlerType: (*HyperstartServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "AddContainer",
			Handler:    _HyperstartService_AddContainer_Handler,
		},
		{
			MethodName: "AddProcess",
			Handler:    _HyperstartService_AddProcess_Handler,
		},
		{
			MethodName: "SignalProcess",
			Handler:    _HyperstartService_SignalProcess_Handler,
		},
		{
			MethodName: "WaitProcess",
			Handler:    _HyperstartService_WaitProcess_Handler,
		},
		{
			MethodName: "WriteStdin",
			Handler:    _HyperstartService_WriteStdin_Handler,
		},
		{
			MethodName: "ReadStdout",
			Handler:    _HyperstartService_ReadStdout_Handler,
		},
		{
			MethodName: "ReadStderr",
			Handler:    _HyperstartService_ReadStderr_Handler,
		},
		{
			MethodName: "CloseStdin",
			Handler:    _HyperstartService_CloseStdin_Handler,
		},
		{
			MethodName: "TtyWinResize",
			Handler:    _HyperstartService_TtyWinResize_Handler,
		},
		{
			MethodName: "StartSandbox",
			Handler:    _HyperstartService_StartSandbox_Handler,
		},
		{
			MethodName: "DestroySandbox",
			Handler:    _HyperstartService_DestroySandbox_Handler,
		},
		{
			MethodName: "UpdateInterface",
			Handler:    _HyperstartService_UpdateInterface_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _HyperstartService_AddRoute_Handler,
		},
		{
			MethodName: "OnlineCPUMem",
			Handler:    _HyperstartService_OnlineCPUMem_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "hyperstart.proto",
}

func init() { proto.RegisterFile("hyperstart.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1968 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x6e, 0x1b, 0xb9,
	0x15, 0xae, 0xe4, 0x91, 0x65, 0x1d, 0xc9, 0x3f, 0xa2, 0x6c, 0x47, 0x51, 0xb6, 0xbb, 0xc9, 0x2c,
	0x9a, 0x35, 0x1a, 0xac, 0x82, 0x3a, 0x8b, 0x6e, 0xb6, 0x45, 0x50, 0x38, 0x8e, 0xb1, 0xc9, 0x6e,
	0xdd, 0xba, 0xb4, 0x8c, 0x00, 0x05, 0x0a, 0x75, 0x3c, 0x43, 0xcb, 0xac, 0x35, 0xc3, 0x09, 0xc9,
	0xb1, 0xa5, 0x5e, 0xf4, 0x11, 0x0a, 0xf4, 0xb2, 0x57, 0xbd, 0xef, 0x13, 0xf4, 0x29, 0xfa, 0x08,
	0x7d, 0x80, 0x5e, 0xf6, 0x09, 0x0a, 0xfe, 0xcc, 0x0c, 0xf5, 0x63, 0x07, 0xdb, 0x4d, 0x6f, 0x04,
	0x9e, 0xc3, 0x73, 0xbe, 0xf3, 0x43, 0x9e, 0x33, 0xd4, 0x81, 0xad, 0xcb, 0x69, 0x4a, 0xb8, 0x90,
	0x01, 0x97, 0xfd, 0x94, 0x33, 0xc9, 0x90, 0x37, 0xe2, 0x69, 0xd8, 0x7b, 0x30, 0x62, 0x6c, 0x34,
	0x26, 0x4f, 0x35, 0xef, 0x3c, 0xbb, 0x78, 0x4a, 0xe2, 0x54, 0x4e, 0x8d, 0x48, 0xef, 0x93, 0xf9,
	0x4d, 0x49, 0x63, 0x22, 0x64, 0x10, 0xa7, 0x46, 0xc0, 0x1f, 0x41, 0xe7, 0x20, 0x8a, 0x0e, 0x59,
	0x22, 0x03, 0x9a, 0x10, 0x8e, 0xc9, 0xbb, 0x8c, 0x08, 0x89, 0x3e, 0x87, 0x46, 0x98, 0xf3, 0xba,
	0x95, 0x87, 0x95, 0xbd, 0xe6, 0xfe, 0x66, 0x5f, 0x99, 0xeb, 0x97, 0xa2, 0xa5, 0x04, 0x7a, 0x04,
	0x1e, 0x4d, 0xa8, 0xec, 0x56, 0xb5, 0xe4, 0xba, 0x91, 0x3c, 0xe1, 0x2c, 0x24, 0x42, 0x60, 0xbd,
	0xe5, 0xff, 0x16, 0xda, 0x07, 0x51, 0x94, 0xf3, 0xac, 0x99, 0x8f, 0xe6, 0xcd, 0x34, 0x5c, 0xd4,
	0xcf, 0xa0, 0x9e, 0x1a, 0xf9, 0xe5, 0xc0, 0xf9, 0xae, 0x7f, 0x01, 0xdb, 0xa7, 0x74, 0x94, 0x04,
	0xe3, 0xef, 0x04, 0xdf, 0x9d, 0x85, 0x6f, 0x14, 0x78, 0x68, 0x17, 0x56, 0x85, 0xc6, 0xeb, 0xae,
	0x3c, 0xac, 0xec, 0xad, 0x63, 0x4b, 0xf9, 0xbf, 0x04, 0xf4, 0x36, 0xa0, 0xf2, 0xc3, 0x58, 0xf1,
	0x3f, 0x87, 0xce, 0x0c, 0x9a, 0x48, 0x59, 0x22, 0x88, 0x36, 0x2e, 0x03, 0x99, 0x09, 0x8d, 0x55,
	0xc3, 0x96, 0xf2, 0x7f, 0x0f, 0xe8, 0x2d, 0xa7, 0x92, 0x9c, 0x4a, 0x4e, 0x82, 0xf8, 0xfb, 0x86,
	0x88, 0xc0, 0x8b, 0x02, 0x19, 0xe8, 0x00, 0x5b, 0x58, 0xaf, 0xfd, 0xcf, 0xa0, 0x33, 0x63, 0xc1,
	0x3a, 0xb4, 0x05, 0x2b, 0x63, 0x92, 0x68, 0xf0, 0x75, 0xac, 0x96, 0xfe, 0xef, 0xa0, 0x8d, 0x49,
	0x10, 0x7d, 0x18, 0x4f, 0x2c, 0xfc, 0x4a, 0x09, 0xbf, 0x07, 0xc8, 0x85, 0xb7, 0x6e, 0xe4, 0x1e,
	0x57, 0x1c, 0x8f, 0xbf, 0x85, 0xf6, 0xe1, 0x98, 0x09, 0x72, 0x2a, 0x23, 0x9a, 0x7c, 0xdf, 0xf3,
	0xb8, 0x81, 0xce, 0x40, 0x4e, 0xdf, 0x2a, 0x20, 0x41, 0xff, 0x48, 0x3e, 0x40, 0x5c, 0x9c, 0xdd,
	0xe4, 0x71, 0x71, 0x76, 0xa3, 0x4e, 0x36, 0x64, 0xe3, 0x2c, 0x4e, 0xba, 0x9e, 0xb9, 0x56, 0x86,
	0xf2, 0x0f, 0xa1, 0x73, 0xaa, 0xca, 0xfa, 0x34, 0x48, 0xa2, 0x73, 0x36, 0xc9, 0x0d, 0xf7, 0x60,
	0xed, 0x92, 0x09, 0x99, 0x04, 0x31, 0xb1, 0x76, 0x0b, 0x5a, 0x81, 0x47, 0x89, 0x32, 0xb9, 0xb2,
	0xd7, 0xc0, 0x6a, 0xe9, 0xdf, 0x83, 0x9d, 0x57, 0x44, 0x48, 0xce, 0xa6, 0xb3, 0x30, 0xfe, 0x37,
	0xb0, 0x7b, 0x96, 0x46, 0x81, 0x24, 0x6f, 0x12, 0x49, 0xf8, 0x45, 0x10, 0x16, 0x91, 0xed, 0xc2,
	0x6a, 0x44, 0xae, 0x69, 0x98, 0xc3, 0x5b, 0x4a, 0xc5, 0x14, 0x44, 0x11, 0x37, 0x31, 0x29, 0x03,
	0x39, 0xe9, 0xff, 0x14, 0x36, 0x0f, 0xa2, 0x08, 0xb3, 0x4c, 0x16, 0x20, 0x9f, 0xc2, 0x2a, 0x57,
	0xb4, 0xba, 0xae, 0x2b, 0x7b, 0xcd, 0xfd, 0xa6, 0xa9, 0x51, 0x23, 0x63, 0xb7, 0xfc, 0x1d, 0xe8,
	0xfc, 0x3a, 0x19, 0xd3, 0x84, 0x1c, 0x9e, 0x9c, 0x1d, 0x93, 0xfc, 0xca, 0xf8, 0xff, 0xac, 0x40,
	0xa3, 0xe8, 0x27, 0x68, 0x03, 0xaa, 0x34, 0xb2, 0xae, 0x54, 0x69, 0xa4, 0x90, 0x63, 0x96, 0x25,
	0xd2, 0x78, 0x51, 0x20, 0x1f, 0x2b, 0x1e, 0xb6, 0x5b, 0xe8, 0x19, 0xac, 0x8a, 0xa9, 0x08, 0xa5,
	0x2a, 0x55, 0x25, 0xf4, 0x60, 0xae, 0x4b, 0xf5, 0x4f, 0xf5, 0xee, 0x51, 0x22, 0xf9, 0x14, 0x5b,
	0x51, 0x75, 0xa4, 0x98, 0x08, 0x96, 0xf1, 0x90, 0x08, 0x7d, 0x16, 0x0d, 0x5c, 0x32, 0x7a, 0x5f,
	0x41, 0xd3, 0x51, 0x52, 0xa9, 0xbe, 0x22, 0x53, 0xeb, 0x97, 0x5a, 0xa2, 0x6d, 0xa8, 0x5d, 0x07,
	0xe3, 0x8c, 0xd8, 0x13, 0x37, 0xc4, 0xcf, 0xaa, 0xcf, 0x2b, 0x7e, 0x00, 0x35, 0xed, 0x9e, 0xbe,
	0xac, 0x44, 0x48, 0xab, 0xa5, 0xd7, 0xba, 0xb0, 0xb5, 0x09, 0xab, 0x67, 0x29, 0x25, 0x2b, 0xa7,
	0x29, 0xd1, 0x37, 0xa5, 0x81, 0xf5, 0x5a, 0x1d, 0x01, 0x4b, 0x25, 0x65, 0x89, 0xf2, 0x4f, 0x1f,
	0x81, 0x25, 0xfd, 0xbf, 0x54, 0xa1, 0x6e, 0x5b, 0xc6, 0x42, 0xc6, 0x10, 0x78, 0x01, 0x1f, 0xe5,
	0xa7, 0xa6, 0xd7, 0xe8, 0x09, 0x78, 0x24, 0xb9, 0x16, 0x36, 0x3d, 0xf7, 0x66, 0x3a, 0x68, 0xff,
	0x28, 0xb9, 0x16, 0x26, 0x35, 0x5a, 0x08, 0x7d, 0x0c, 0x5e, 0x26, 0x08, 0xd7, 0x39, 0x69, 0xee,
	0x83, 0x11, 0x3e, 0x13, 0x84, 0x63, 0xcd, 0x57, 0x6e, 0xdd, 0x30, 0x7e, 0x15, 0x51, 0xde, 0xad,
	0x99, 0xdb, 0x6e, 0x49, 0x75, 0x59, 0x25, 0xe1, 0x31, 0x55, 0x4d, 0x73, 0xf5, 0x61, 0x65, 0x6f,
	0x0d, 0x17, 0x34, 0x7a, 0x0c, 0x75, 0x3e, 0xa6, 0x31, 0x95, 0xa2, 0x5b, 0xd7, 0x5e, 0xb4, 0xec,
	0x1d, 0xd1, 0x4c, 0x9c, 0x6f, 0xf6, 0xbe, 0x84, 0x46, 0xe1, 0xd0, 0x77, 0x4a, 0x3b, 0x06, 0x4f,
	0x39, 0xa9, 0x74, 0xb2, 0x22, 0x21, 0x6a, 0xa9, 0x38, 0x23, 0x1a, 0x59, 0x0d, 0xb5, 0x44, 0x8f,
	0x61, 0x23, 0x88, 0x22, 0xaa, 0x92, 0x19, 0x8c, 0xbf, 0xa6, 0x91, 0xc9, 0xcc, 0x3a, 0x9e, 0xe3,
	0xfa, 0xaf, 0x60, 0xd5, 0xf8, 0x57, 0x9c, 0x4f, 0xc5, 0x39, 0x1f, 0x04, 0xde, 0x65, 0xc0, 0x0d,
	0xb0, 0x87, 0xf5, 0x5a, 0xf1, 0x04, 0xbb, 0x90, 0xfa, 0x1c, 0x3d, 0xac, 0xd7, 0xfe, 0x31, 0xd4,
	0x74, 0x25, 0x2c, 0xbd, 0x10, 0x5d, 0xa8, 0x8f, 0x02, 0x49, 0x6e, 0x82, 0x69, 0xde, 0x3b, 0x2c,
	0xe9, 0x54, 0xe6, 0x8a, 0x5b, 0x99, 0xfe, 0x9f, 0xab, 0xd0, 0xfa, 0x15, 0x91, 0x2a, 0xe9, 0xa7,
	0x32, 0x90, 0xba, 0x8d, 0x3b, 0xfd, 0x41, 0xaf, 0xd1, 0x7d, 0x58, 0xe3, 0x93, 0xe1, 0xf9, 0x54,
	0xd5, 0xa4, 0xf1, 0xaf, 0xce, 0x27, 0x2f, 0x15, 0x89, 0x7e, 0x08, 0xc0, 0x27, 0xc3, 0x93, 0x20,
	0xbc, 0x22, 0x52, 0x58, 0x47, 0x1b, 0x7c, 0x62, 0x19, 0xe8, 0x01, 0x34, 0xf0, 0x64, 0x48, 0x38,
	0x67, 0xdc, 0xd4, 0x85, 0x87, 0xd7, 0xf0, 0xe4, 0x48, 0xd3, 0x4a, 0x17, 0x4f, 0x86, 0x11, 0x67,
	0x69, 0x4a, 0x22, 0x7d, 0xfc, 0x1e, 0x6e, 0xe0, 0xc9, 0x2b, 0xc3, 0x50, 0x56, 0x07, 0xb9, 0xd5,
	0x55, 0x63, 0x75, 0x50, 0x5a, 0x1d, 0x4c, 0x86, 0xa9, 0xb5, 0x5a, 0x37, 0x9a, 0x03, 0xd7, 0xea,
	0xa0, 0xb0, 0xba, 0x66, 0xac, 0x0e, 0x1c, 0xab, 0x83, 0xd2, 0x6a, 0x23, 0xd7, 0xb5, 0x56, 0xfd,
	0xbf, 0x57, 0x60, 0xed, 0x30, 0xcd, 0xce, 0x44, 0x30, 0x22, 0xe8, 0x13, 0x68, 0x4a, 0x26, 0x83,
	0xf1, 0x30, 0x53, 0xa4, 0xce, 0x89, 0x87, 0x41, 0xb3, 0x8c, 0xc0, 0x23, 0x68, 0xa5, 0x84, 0x87,
	0x69, 0x66, 0x25, 0x54, 0x9d, 0x78, 0xb8, 0x69, 0x78, 0x46, 0xa4, 0x0f, 0x1d, 0xbd, 0x37, 0xa4,
	0xc9, 0xf0, 0x8a, 0xf0, 0x84, 0x8c, 0x63, 0x16, 0x11, 0x9b, 0xaa, 0xb6, 0xde, 0x7a, 0x93, 0x7c,
	0x5b, 0x6c, 0xa0, 0x1f, 0x43, 0xbb, 0x90, 0x57, 0x25, 0xa2, 0xa5, 0x4d, 0xea, 0x36, 0xad, 0xf4,
	0x99, 0x65, 0xfb, 0x7f, 0x82, 0x8d, 0xc1, 0x25, 0x67, 0x52, 0x8e, 0x69, 0x32, 0x7a, 0x15, 0xc8,
	0x40, 0x7f, 0x3d, 0x08, 0xa7, 0x2c, 0x12, 0xd6, 0xdb, 0x9c, 0x44, 0x4f, 0xa0, 0x2d, 0x8d, 0x2c,
	0x89, 0x86, 0xb9, 0x8c, 0x39, 0xcd, 0xad, 0x62, 0xe3, 0xc4, 0x0a, 0xff, 0x08, 0x36, 0x4a, 0x61,
	0xf5, 0xc2, 0xb3, 0xfe, 0xae, 0x17, 0xdc, 0x01, 0x8d, 0x89, 0xff, 0x57, 0x93, 0x2c, 0x73, 0x73,
	0x9e, 0x40, 0xa3, 0x4c, 0x84, 0x79, 0xe1, 0x6d, 0xd8, 0xde, 0x69, 0x73, 0x81, 0xd7, 0x8a, 0xac,
	0xbc, 0x80, 0x4d, 0x59, 0x78, 0x3e, 0xd4, 0x9f, 0x61, 0xf3, 0x22, 0xdb, 0x36, 0x2a, 0xb3, 0x61,
	0xe1, 0x0d, 0x39, 0x1b, 0xe6, 0x23, 0x68, 0x89, 0xa9, 0x90, 0x24, 0xb6, 0xe6, 0x8c, 0x77, 0x4d,
	0xc3, 0xd3, 0x16, 0xfc, 0x9f, 0x43, 0xe3, 0x84, 0x46, 0xc2, 0xf8, 0xd6, 0x85, 0x7a, 0x98, 0x71,
	0x4e, 0x12, 0x99, 0xa7, 0xc5, 0x92, 0xaa, 0x07, 0xe8, 0xa2, 0xb4, 0xa9, 0x30, 0x84, 0xcf, 0x00,
	0x8e, 0x49, 0xcc, 0xf8, 0x54, 0x5b, 0xdb, 0x86, 0x9a, 0x7b, 0x01, 0x0c, 0xa1, 0x6e, 0x59, 0x1c,
	0x4c, 0x8a, 0x83, 0xd7, 0xb7, 0x2c, 0x0e, 0x26, 0x26, 0xbe, 0x2e, 0xd4, 0x2f, 0x02, 0x3a, 0x0e,
	0x93, 0xbc, 0x7a, 0x73, 0xb2, 0x34, 0xe8, 0xb9, 0x06, 0xff, 0x56, 0x85, 0xa6, 0xb1, 0x68, 0x1c,
	0xde, 0x86, 0x5a, 0x18, 0x84, 0x97, 0x85, 0x49, 0x4d, 0xa0, 0xc7, 0xb9, 0x23, 0x26, 0x57, 0x5b,
	0xf6, 0xfb, 0x55, 0x78, 0x9a, 0xbb, 0xf6, 0x14, 0x40, 0xdc, 0x04, 0xa9, 0x93, 0x9c, 0x65, 0xc2,
	0x0d, 0x25, 0x63, 0xdc, 0x7d, 0x06, 0x2d, 0x73, 0x37, 0xad, 0x8a, 0x77, 0x8b, 0x4a, 0xd3, 0x48,
	0x19, 0xa5, 0x7d, 0xa8, 0xa9, 0x97, 0xa4, 0xe8, 0xd6, 0x74, 0x0f, 0xfe, 0xc8, 0x95, 0xd6, 0x51,
	0xf4, 0xf5, 0xaf, 0xf9, 0x1c, 0x18, 0xd1, 0xde, 0x73, 0x80, 0x92, 0xf9, 0xbe, 0x96, 0xec, 0xb9,
	0x2d, 0x39, 0x84, 0xcd, 0x97, 0xe3, 0x2b, 0xca, 0x1c, 0xf5, 0x6d, 0xa8, 0xc5, 0xc1, 0x1f, 0x18,
	0xcf, 0x93, 0xa4, 0x09, 0xcd, 0xa5, 0x09, 0xe3, 0x39, 0x84, 0x26, 0xd4, 0x97, 0x8d, 0xa5, 0xb6,
	0xf9, 0x55, 0x59, 0x5a, 0x1a, 0xf2, 0x1c, 0x43, 0xfe, 0xbf, 0x3c, 0x80, 0xd2, 0x0a, 0xc2, 0xd0,
	0xa3, 0x6c, 0x28, 0x08, 0x57, 0xbd, 0xd2, 0xb4, 0xa2, 0x21, 0x27, 0x61, 0xc6, 0x05, 0xbd, 0x26,
	0xf6, 0x79, 0xb2, 0x63, 0xc2, 0x9e, 0xf3, 0x0d, 0xdf, 0xa3, 0xec, 0xd4, 0xe8, 0xe9, 0x96, 0x85,
	0x73, 0x2d, 0xf4, 0x06, 0x76, 0x4a, 0xcc, 0xc8, 0x81, 0xab, 0xde, 0x05, 0xd7, 0x29, 0xe0, 0xa2,
	0x12, 0xea, 0x08, 0x3a, 0x94, 0x0d, 0xdf, 0x65, 0x24, 0x9b, 0x01, 0x5a, 0xb9, 0x0b, 0xa8, 0x4d,
	0xd9, 0x6f, 0xb4, 0x42, 0x09, 0x73, 0x02, 0xf7, 0x9d, 0x28, 0x55, 0xb5, 0x3b, 0x60, 0xde, 0x5d,
	0x60, 0xbb, 0x85, 0x57, 0xaa, 0x1d, 0x94, 0x88, 0xdf, 0xc0, 0x2e, 0x65, 0xc3, 0x9b, 0x80, 0xca,
	0x79, 0xb8, 0xda, 0x7b, 0x82, 0x54, 0xff, 0x5f, 0x66, 0xb1, 0x4c, 0x90, 0x31, 0xe1, 0xa3, 0x99,
	0x20, 0x57, 0xdf, 0x13, 0xe4, 0xb1, 0x56, 0x28, 0x61, 0x0e, 0xa0, 0x4d, 0xd9, 0xbc, 0x37, 0xf5,
	0xbb, 0x40, 0x36, 0x29, 0x9b, 0xf5, 0xe4, 0x25, 0xb4, 0x05, 0x09, 0x25, 0xe3, 0xee, 0x25, 0x58,
	0xbb, 0x0b, 0x62, 0xcb, 0xca, 0x17, 0x18, 0xfe, 0x3b, 0x68, 0xbd, 0xce, 0x46, 0x44, 0x8e, 0xcf,
	0x8b, 0x3a, 0xff, 0x7f, 0xb7, 0x96, 0xff, 0x54, 0xa1, 0x79, 0x38, 0xe2, 0x2c, 0x4b, 0x67, 0xfa,
	0xb4, 0x29, 0xdd, 0xf9, 0x3e, 0xad, 0x45, 0x74, 0x9f, 0x36, 0xc2, 0x5f, 0x40, 0x2b, 0xd6, 0x05,
	0x6d, 0xe5, 0x4d, 0xe3, 0x69, 0x2f, 0x94, 0x3a, 0x6e, 0xc6, 0x4e, 0xf7, 0xfa, 0x09, 0x34, 0xcf,
	0x55, 0x2a, 0xac, 0xd2, 0x4c, 0x03, 0x2a, 0x73, 0x84, 0xe1, 0xbc, 0x2c, 0xb5, 0xd7, 0xb0, 0x7e,
	0x69, 0x12, 0x63, 0x95, 0xcc, 0xc5, 0xfb, 0xd4, 0x7a, 0x56, 0xfa, 0xdf, 0x77, 0xf3, 0x67, 0xd2,
	0xdc, 0xba, 0x74, 0x53, 0xda, 0x07, 0x48, 0x69, 0x24, 0x86, 0x79, 0x6f, 0x72, 0x46, 0x0d, 0xc5,
	0x07, 0x01, 0x37, 0xd2, 0x7c, 0xd9, 0x3b, 0x85, 0xf6, 0x02, 0xe4, 0x92, 0xce, 0xb4, 0xe7, 0x76,
	0xa6, 0xe6, 0x3e, 0x32, 0x88, 0xae, 0xa6, 0xdb, 0xad, 0xfe, 0x51, 0x81, 0x75, 0xc3, 0xcc, 0xff,
	0x6d, 0x7e, 0x09, 0xeb, 0x89, 0x79, 0x68, 0x15, 0xa9, 0x5f, 0x29, 0x71, 0xdc, 0x37, 0x18, 0x6e,
	0x25, 0xee, 0x8b, 0xec, 0x0b, 0x68, 0x85, 0x3a, 0xfc, 0x65, 0x47, 0xe0, 0x24, 0x06, 0x37, 0x43,
	0xe7, 0x94, 0x9f, 0x43, 0xa3, 0x98, 0xcc, 0xd8, 0x76, 0xde, 0xeb, 0x9b, 0xd9, 0x4d, 0x3f, 0x9f,
	0xdd, 0xf4, 0x07, 0xb9, 0x04, 0x2e, 0x85, 0xfd, 0x8f, 0xa1, 0x65, 0x3d, 0x37, 0xff, 0xc7, 0xe6,
	0xfe, 0x13, 0xec, 0xff, 0xbb, 0x0e, 0xed, 0xd7, 0xc5, 0xe4, 0xc8, 0xd6, 0x3f, 0x3a, 0x80, 0x96,
	0x3b, 0xf6, 0x41, 0xf7, 0x8d, 0x7f, 0x4b, 0x46, 0x41, 0xbd, 0xdd, 0x05, 0x3f, 0x8e, 0xe2, 0x54,
	0x4e, 0xd1, 0x0b, 0x80, 0x72, 0xa0, 0x83, 0xee, 0x15, 0x00, 0xb3, 0xd3, 0x91, 0x5b, 0xd5, 0x0f,
	0x61, 0x7d, 0x66, 0x66, 0x83, 0x7a, 0x06, 0x61, 0xd9, 0x20, 0xe7, 0x56, 0x90, 0x97, 0xd0, 0x74,
	0x46, 0x28, 0xa8, 0x6b, 0x20, 0x16, 0x67, 0x34, 0xbd, 0xfb, 0x4b, 0x76, 0xec, 0x49, 0xef, 0x43,
	0xcd, 0xbe, 0xa5, 0xad, 0x03, 0x4e, 0x36, 0x7b, 0x9d, 0x19, 0x9e, 0xd1, 0xf0, 0x7f, 0x80, 0x0e,
	0x00, 0xec, 0xa4, 0x24, 0xa2, 0x49, 0x61, 0x76, 0x61, 0x3a, 0x53, 0x98, 0x5d, 0x32, 0x55, 0xf9,
	0x05, 0x80, 0x19, 0x72, 0x44, 0x2c, 0x93, 0x79, 0xfa, 0x16, 0xa6, 0x2a, 0xbd, 0xee, 0xe2, 0xc6,
	0x02, 0x00, 0xe1, 0xfc, 0x7f, 0x01, 0x78, 0x01, 0x50, 0x0e, 0x4f, 0x72, 0x80, 0x85, 0x71, 0xca,
	0xad, 0xb9, 0x3f, 0x80, 0x96, 0x3b, 0x2e, 0xc9, 0xaf, 0xd0, 0x92, 0x11, 0xca, 0x5d, 0x10, 0xee,
	0xe0, 0x23, 0x87, 0x58, 0x32, 0x0c, 0xb9, 0x15, 0xe2, 0x08, 0x36, 0x66, 0xc7, 0x1e, 0xc8, 0x4e,
	0x00, 0x96, 0x0e, 0x43, 0x6e, 0x85, 0xf9, 0x1a, 0x36, 0xe7, 0x86, 0x24, 0xc8, 0x3e, 0x90, 0x96,
	0xcf, 0x4e, 0x6e, 0x05, 0xfa, 0x0a, 0xd6, 0xf2, 0x09, 0x09, 0xda, 0x29, 0x6a, 0xc2, 0x9d, 0x98,
	0xdc, 0x95, 0x0d, 0x77, 0x48, 0x92, 0x67, 0x63, 0xc9, 0xe0, 0xe4, 0x36, 0x88, 0xf3, 0x55, 0x4d,
	0x3f, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0x72, 0x54, 0x12, 0x2c, 0x16, 0x00, 0x00,
}
